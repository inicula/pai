# Print if there is a path from the Player to the Goal (with iterative DFS)
# 0 = Empty cell
# 1 = Blocked cell
# 2 = Player
# 3 = Goal

# Run with the provided maze example: ./pai tests/9.pai <tests/9.in

# Maze
nrows = read $ _;
ncols = read $ _;
mat = [];
i = 0;
while i < nrows {
    current_row = [];
    j = 0;
    while j < ncols {
        current_row = current_row + [read $ _];
        j = j + 1;
    }

    mat = mat + [current_row];
    i = i + 1;
}

vis_mat = [];
i = 0;
while i < nrows {
    current_row = [];
    j = 0;
    while j < ncols {
        current_row = current_row + [False];
        j = j + 1;
    }

    vis_mat = vis_mat + [current_row];
    i = i + 1;
}

found = False;
stack = [[0, 0]];
l = 1;
while l > 0 {
    # Pop stack
    new_stack = [];
    i = 0;
    while i < l - 1 {
        new_stack = new_stack + [stack[i]];
        i = i + 1;
    }

    pos = stack[l - 1];
    stack = new_stack;
    l = l - 1;

    # Check if Goal is reached
    if mat[pos[0]][pos[1]] == 3 {
        found = True;
        break;
    }

    if !vis_mat[pos[0]][pos[1]] {
        # Calculate the neighbour cells
        left  = [pos[0] - 1, pos[1]];
        right = [pos[0] + 1, pos[1]];
        up    = [pos[0], pos[1] + 1];
        down  = [pos[0], pos[1] - 1];

        nei = [left, right, up, down];
        i = 0;
        while i < 4 {
            # Check neighbour cell validity (not blocked and not out of bounds)
            if nei[i][0] > -1 && nei[i][0] < nrows &&
               nei[i][1] > -1 && nei[i][1] < ncols &&
               !(mat[nei[i][0]][nei[i][1]] == 1) { 
                stack = stack + [nei[i]];
                l = l + 1;
            }
            
            i = i + 1;
        }

        # Mark the current position as visited
        new_vis_mat = [];
        i = 0;
        while i < nrows {
            current_row = [];
            j = 0;
            while j < ncols {
                current_row = current_row + [vis_mat[i][j] || (pos[0] == i && pos[1] == j)];
                j = j + 1;
            }

            new_vis_mat = new_vis_mat + [current_row];
            i = i + 1;
        }

        vis_mat = new_vis_mat;
    }
}

if found {
    "Reachable";
} else {
    "Unreachable";
}
